name: Main PR Validation

on:
  pull_request:
    branches: [main]

jobs:
  validate-release-source:
    runs-on: ubuntu-latest
    outputs:
      is_release_pr: ${{ steps.check-release.outputs.is_release_pr }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify PR is from release branch
        id: check-release
        run: |
          BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          HEAD_BRANCH="${{ github.event.pull_request.head.ref }}"

          echo "Base branch: $BASE_BRANCH"
          echo "Head branch: $HEAD_BRANCH"

          if [ "$BASE_BRANCH" = "main" ]; then
            if [[ "$HEAD_BRANCH" == release/* ]]; then
              echo "✅ This is a release PR: $HEAD_BRANCH → main"
              echo "is_release_pr=true" >> $GITHUB_OUTPUT
            else
              echo "⚠️ Warning: This PR is targeting main but does not originate from a release branch."
              echo "For standard release process, PRs to main should come from release/* branches."
              echo "Current PR: $HEAD_BRANCH → main"
              echo "is_release_pr=false" >> $GITHUB_OUTPUT
              
              # Add warning comment
              cat >> warning_comment.md << 'EOF'
          ## ⚠️ Non-Release PR to Main

          This PR is targeting `main` but does not originate from a `release/*` branch.

          **Standard Release Process:**
          - PRs to `main` should come from `release/*` branches
          - Direct PRs to `main` should be rare (hotfixes, urgent fixes)

          **Current PR:** `$HEAD_BRANCH` → `main`

          Please confirm this is intentional or consider creating a proper release branch.
          EOF
            fi
          fi

      - name: Add non-release warning comment
        if: steps.check-release.outputs.is_release_pr == 'false'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: non-release-warning
          path: warning_comment.md

  changelog-preview:
    runs-on: ubuntu-latest
    if: needs.validate-release-source.outputs.is_release_pr == 'true'
    needs: validate-release-source
    outputs:
      bump: ${{ steps.changelog-preview.outputs.bump }}
      new_version: ${{ steps.changelog-preview.outputs.new_version }}
      changelog: ${{ steps.changelog-preview.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog preview
        id: changelog-preview
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: patch
          release_branches: main
          tag_prefix: v
          dry_run: true

      - name: Add changelog preview to PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: release-changelog-preview
          message: |
            ## 🚀 Release Preview

            This release PR will create version **v${{ steps.changelog-preview.outputs.new_version }}** when merged to main.

            ### 📋 Release Changelog

            ${{ steps.changelog-preview.outputs.changelog }}

            ### 🎯 What happens when this PR is merged:

            1. **Version & Tagging:**
               - New version: `v${{ steps.changelog-preview.outputs.new_version }}`
               - Git tag will be created automatically
               - `package.json` version will be updated

            2. **Publishing:**
               - Package will be published to NPM with `latest` tag
               - GitHub Release will be created with full changelog
               - `CHANGELOG.md` will be updated

            3. **Branch Sync:**
               - Automatic PR will be created to sync `main` → `develop`
               - Ensures develop branch stays up to date with release changes

            ### 📦 Installation (after merge):
            ```bash
            npm install genius-intents@latest
            # or
            npm install genius-intents@${{ steps.changelog-preview.outputs.new_version }}
            ```

            ---

            *This preview is automatically generated from your commit history and will be the final release notes.*

  release-readiness-check:
    runs-on: ubuntu-latest
    if: needs.validate-release-source.outputs.is_release_pr == 'true'
    needs: [validate-release-source, changelog-preview]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check release branch naming
        id: branch-check
        run: |
          HEAD_BRANCH="${{ github.event.pull_request.head.ref }}"

          if [[ "$HEAD_BRANCH" =~ ^release/[0-9]{8}-[0-9]{6}$ ]]; then
            echo "branch_format=✅ Timestamped release branch" >> $GITHUB_OUTPUT
          elif [[ "$HEAD_BRANCH" =~ ^release/v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "branch_format=✅ Version-based release branch" >> $GITHUB_OUTPUT
          elif [[ "$HEAD_BRANCH" =~ ^release/.+$ ]]; then
            echo "branch_format=⚠️ Custom release branch format" >> $GITHUB_OUTPUT
          else
            echo "branch_format=❌ Unexpected branch format" >> $GITHUB_OUTPUT
          fi

      - name: Check for breaking changes
        id: breaking-check
        run: |
          CHANGELOG="${{ needs.changelog-preview.outputs.changelog }}"

          if echo "$CHANGELOG" | grep -qi "breaking\|BREAKING"; then
            echo "has_breaking=true" >> $GITHUB_OUTPUT
            echo "breaking_warning=⚠️ **Contains breaking changes**" >> $GITHUB_OUTPUT
          else
            echo "has_breaking=false" >> $GITHUB_OUTPUT
            echo "breaking_warning=✅ No breaking changes detected" >> $GITHUB_OUTPUT
          fi

      - name: Analyze release scope
        id: scope-analysis
        run: |
          CHANGELOG="${{ needs.changelog-preview.outputs.changelog }}"

          FEATURE_COUNT=$(echo "$CHANGELOG" | grep -c "feat\|feature" || echo "0")
          FIX_COUNT=$(echo "$CHANGELOG" | grep -c "fix\|bug" || echo "0")
          DOCS_COUNT=$(echo "$CHANGELOG" | grep -c "docs\|documentation" || echo "0")
          CHORE_COUNT=$(echo "$CHANGELOG" | grep -c "chore\|maintenance" || echo "0")

          echo "features=$FEATURE_COUNT" >> $GITHUB_OUTPUT
          echo "fixes=$FIX_COUNT" >> $GITHUB_OUTPUT
          echo "docs=$DOCS_COUNT" >> $GITHUB_OUTPUT
          echo "chores=$CHORE_COUNT" >> $GITHUB_OUTPUT

      - name: Generate release readiness summary
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: release-readiness
          message: |
            ## 📊 Release Readiness Check

            ### 🔍 Release Analysis
            - **Branch Format:** ${{ steps.branch-check.outputs.branch_format }}
            - **Breaking Changes:** ${{ steps.breaking-check.outputs.breaking_warning }}
            - **Version Bump:** ${{ needs.changelog-preview.outputs.bump }} release

            ### 📈 Change Summary
            - **Features:** ${{ steps.scope-analysis.outputs.features }} new features
            - **Bug Fixes:** ${{ steps.scope-analysis.outputs.fixes }} fixes
            - **Documentation:** ${{ steps.scope-analysis.outputs.docs }} docs updates  
            - **Maintenance:** ${{ steps.scope-analysis.outputs.chores }} chore updates

            ### ✅ Pre-Merge Checklist
            - [ ] All tests passing
            - [ ] Code review completed
            - [ ] Changelog preview looks correct
            - [ ] Version bump is appropriate
            ${{ steps.breaking-check.outputs.has_breaking == 'true' && '- [ ] Breaking changes are documented and communicated' || '' }}
            - [ ] Ready for production release

            ### 🚨 Important Notes
            ${{ steps.breaking-check.outputs.has_breaking == 'true' && '⚠️ **This release contains breaking changes. Ensure users are notified.**' || '' }}

            Once merged, this release will be automatically published to NPM and GitHub Releases.

  # Summary job that runs regardless of release status
  pr-summary:
    runs-on: ubuntu-latest
    needs: [validate-release-source]
    if: always()
    steps:
      - name: Generate PR summary for non-release PRs
        if: needs.validate-release-source.outputs.is_release_pr == 'false'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: pr-summary
          message: |
            ## 📋 Main Branch PR Summary

            This PR targets the `main` branch but is not from a standard `release/*` branch.

            ### 🔄 Standard Release Process
            For regular releases, we recommend:
            1. Create a release branch: `release/YYYYMMDD-HHMMSS`
            2. Open PR from release branch to `main`
            3. Automatic changelog and version management
            4. Automated publishing to NPM

            ### 🚨 Direct PRs to Main
            Direct PRs to main should be used for:
            - Urgent hotfixes
            - Critical security patches
            - Emergency documentation fixes

            If this is a regular feature/fix, please consider using the standard release process.
