name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    if: |
      contains(github.event.head_commit.message, 'release/') || contains(github.event.head_commit.message, 'chore: bump version to')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GIT_PAT_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions [Bot]"

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm
          registry-url: https://registry.npmjs.org

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

      - name: Run linting
        run: npm run lint:check

      - name: Run formatting check
        run: npm run format:check

      - name: Build package
        run: npm run build:clean

      - name: Bump version and create tag
        id: tag-version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GIT_PAT_TOKEN }}
          default_bump: patch
          release_branches: main
          tag_prefix: v
          create_annotated_tag: true

      - name: Update package.json version
        run: |
          NEW_VERSION="${{ steps.tag-version.outputs.new_version }}"
          npm version $NEW_VERSION --no-git-tag-version
          git add package.json package-lock.json
          git commit -m "chore: update package.json to v$NEW_VERSION" || echo "No changes to commit"
          git push origin main

      - name: Update CHANGELOG.md
        run: |
          NEW_VERSION="${{ steps.tag-version.outputs.new_version }}"
          TODAY=$(date +"%Y-%m-%d")
          CHANGELOG_CONTENT="${{ steps.tag-version.outputs.changelog }}"

          # Create new changelog entry
          NEW_ENTRY="## [$NEW_VERSION] - $TODAY\n\n$CHANGELOG_CONTENT\n\n---\n\n"

          # Update or create CHANGELOG.md
          if [ -f "CHANGELOG.md" ]; then
            # Insert new entry after title/header
            if grep -q "^# " CHANGELOG.md; then
              # Has title, insert after first line
              {
                head -n 1 CHANGELOG.md
                echo ""
                echo -e "$NEW_ENTRY"
                tail -n +2 CHANGELOG.md
              } > CHANGELOG_temp.md && mv CHANGELOG_temp.md CHANGELOG.md
            else
              # No title, prepend entry
              {
                echo -e "$NEW_ENTRY"
                cat CHANGELOG.md
              } > CHANGELOG_temp.md && mv CHANGELOG_temp.md CHANGELOG.md
            fi
          else
            # Create new CHANGELOG.md
            {
              echo "# Changelog"
              echo ""
              echo "All notable changes to this project will be documented in this file."
              echo ""
              echo -e "$NEW_ENTRY"
            } > CHANGELOG.md
          fi

          # Commit changelog if there are changes
          if ! git diff --quiet CHANGELOG.md; then
            git add CHANGELOG.md
            git commit -m "docs: update CHANGELOG.md for v$NEW_VERSION"
            git push origin main
          fi

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.tag-version.outputs.new_version }}
          name: Release v${{ steps.tag-version.outputs.new_version }}
          body: |
            ðŸš€ **Release v${{ steps.tag-version.outputs.new_version }}**

            ${{ steps.tag-version.outputs.changelog }}

            ## ðŸ“¦ Installation
            ```bash
            npm install genius-intents@latest
            # or
            npm install genius-intents@${{ steps.tag-version.outputs.new_version }}
            ```
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_PAT_TOKEN }}

      - name: Create PR to sync main back to develop
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GIT_PAT_TOKEN }}
          script: |
            try {
              await github.rest.repos.getBranch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: 'develop'
              });
              
              const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Sync main to develop after release v${{ steps.tag-version.outputs.new_version }}',
                head: 'main',
                base: 'develop',
                body: [
                  'ðŸ”„ **Sync Release v${{ steps.tag-version.outputs.new_version }} to Develop**',
                  '',
                  'This PR syncs the release changes from `main` back to `develop` to keep both branches in sync.',
                  '',
                  '## ðŸš€ Release v${{ steps.tag-version.outputs.new_version }}',
                  '',
                  '${{ steps.tag-version.outputs.changelog }}',
                  '',
                  '## Why This PR?',
                  'After a release, `main` contains the tagged version and updated changelog, but `develop` is behind. This sync ensures:',
                  '- Future development starts from the correct version',
                  '- CHANGELOG.md is up to date on develop',
                  '- No version conflicts in future releases',
                  '- Clean GitFlow branch management',
                  '',
                  '## Next Steps',
                  '1. Review and merge this PR to sync develop',
                  '2. Continue development on develop branch from the new version',
                  '',
                  '---',
                  '*This PR was automatically created by the release workflow.*'
                ].join('\n')
              });
              
              console.log(\`Created sync PR #\${pr.data.number}: \${pr.data.html_url}\`);
              
            } catch (error) {
              console.log('Error creating sync PR:', error.message);
            }
